{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Item","item","dispatch","type","value","title","onChange","e","itemId","id","target","onClick","actions","ADD_ITEM","state","items","Math","random","toString","substring","SET_ITEM_TITLE","map","REMOVE_ITEM","filter","reducer","action","hasOwnProperty","Error","App","initialValue","rawValue","localStorage","getItem","storedState","JSON","parse","useState","setState","useEffect","setItem","stringify","useLocalStorage","setStoredState","useReducer","className","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAwBA,SAASA,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACpB,OACE,6BACE,2BAAOC,KAAK,OAAOC,MAAOH,EAAKI,MAAOC,SAAU,SAACC,GAAD,OAAOL,EAAS,CAAEC,KAAM,iBAAkBK,OAAQP,EAAKQ,GAAIL,MAAOG,EAAEG,OAAON,WAC3H,4BAAQO,QAAS,kBAAMT,EAAS,CAAEC,KAAM,cAAeK,OAAQP,EAAKQ,OAApE,WAiBN,IAAMG,EAAU,CACdC,SAAU,SAACC,GAAD,mBAAC,eACNA,GADK,IAERC,MAAM,GAAD,mBAAOD,EAAMC,OAAS,IAAtB,CAA2B,CAAEN,GAqB7BO,KAAKC,SAASC,SAAS,IAAIC,UAAU,GArBgBd,MAAO,SAEnEe,eAAgB,SAACN,EAAD,OAAUN,EAAV,EAAUA,OAAQJ,EAAlB,EAAkBA,MAAlB,mBAAC,eACZU,GADW,IAEdC,MAAOD,EAAMC,MAAMM,KAAI,SAACpB,GAAD,OAAUA,EAAKQ,KAAOD,EAAZ,2BAA0BP,GAA1B,IAAgCI,MAAOD,IAAUH,QAEpFqB,YAAa,SAACR,EAAD,OAAUN,EAAV,EAAUA,OAAV,mBAAC,eACTM,GADQ,IAEXC,MAAOD,EAAMC,MAAMQ,QAAO,SAACtB,GAAD,OAAUA,EAAKQ,KAAOD,SAIpD,SAASgB,EAAQV,EAAOW,GACtB,GAAIb,EAAQc,eAAeD,EAAOtB,MAChC,OAAOS,EAAQa,EAAOtB,MAAMW,EAAOW,GAGrC,MAAM,IAAIE,MAAJ,+BAAmCF,EAAOtB,KAA1C,MAOOyB,MArEf,WAAgB,IAAD,EA8Bf,SAAyBC,GACvB,IAAMC,EAAWC,aAAaC,QAAQ,SAChCC,EAA2B,OAAbH,EAAoBI,KAAKC,MAAML,GAAYD,EAF1B,EAGXO,mBAASH,GAHE,mBAG9BnB,EAH8B,KAGvBuB,EAHuB,KASrC,OAJAC,qBAAU,WACRP,aAAaQ,QAAQ,QAASL,KAAKM,UAAU1B,MAC5C,CAACA,IAEG,CAACA,EAAOuB,GAtCuBI,CAAgB,IADzC,mBACNR,EADM,KACOS,EADP,OAGaC,qBAAWnB,EAASS,GAHjC,mBAGNnB,EAHM,KAGCZ,EAHD,KAKboC,qBAAU,WACRI,EAAe5B,KACd,CAAC4B,EAAgB5B,IAPP,MAWTA,EADFC,aAVW,MAUH,GAVG,EAab,OACE,yBAAK6B,UAAU,OACZ7B,EAAMM,KAAI,SAACpB,GAAD,OAAW,kBAACD,EAAD,CAAM6C,IAAK5C,EAAKQ,GAAIR,KAAMA,EAAMC,SAAUA,OAChE,4BAAQS,QAAS,kBAAMT,EAAS,CAAEC,KAAM,eAAxC,SCPc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1b3d159a.chunk.js","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n  const [storedState, setStoredState] = useLocalStorage({})\n\n  const [state, dispatch] = useReducer(reducer, storedState)\n\n  useEffect(() => {\n    setStoredState(state)\n  }, [setStoredState, state])\n\n  const {\n    items = [],\n  } = state\n\n  return (\n    <div className=\"App\">\n      {items.map((item) => (<Item key={item.id} item={item} dispatch={dispatch} />))}\n      <button onClick={() => dispatch({ type: 'ADD_ITEM' })}>add</button>\n    </div>\n  )\n}\n\nfunction Item({ item, dispatch }) {\n  return (\n    <div>\n      <input type=\"text\" value={item.title} onChange={(e) => dispatch({ type: 'SET_ITEM_TITLE', itemId: item.id, value: e.target.value })} />\n      <button onClick={() => dispatch({ type: 'REMOVE_ITEM', itemId: item.id })}>remove</button>\n    </div>\n  )\n}\n\nfunction useLocalStorage(initialValue) {\n  const rawValue = localStorage.getItem('state')\n  const storedState = rawValue !== null ? JSON.parse(rawValue) : initialValue\n  const [state, setState] = useState(storedState)\n\n  useEffect(() => {\n    localStorage.setItem('state', JSON.stringify(state));\n  }, [state])\n\n  return [state, setState];\n}\n\nconst actions = {\n  ADD_ITEM: (state) => ({\n    ...state,\n    items: [...(state.items || []), { id: generateRandomId(), title: '' }],\n  }),\n  SET_ITEM_TITLE: (state, { itemId, value }) => ({\n    ...state,\n    items: state.items.map((item) => item.id === itemId ? { ...item, title: value } : item),\n  }),\n  REMOVE_ITEM: (state, { itemId }) => ({\n    ...state,\n    items: state.items.filter((item) => item.id !== itemId),\n  }),\n}\n\nfunction reducer(state, action) {\n  if (actions.hasOwnProperty(action.type)) {\n    return actions[action.type](state, action)\n  }\n\n  throw new Error(`Unknown action type \\`${action.type}\\``)\n}\n\nfunction generateRandomId() {\n  return Math.random().toString(36).substring(7)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}