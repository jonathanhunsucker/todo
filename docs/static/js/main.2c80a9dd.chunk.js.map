{"version":3,"sources":["App.js","status.js","serviceWorker.js","index.js"],"names":["Index","items","dispatch","Stack","Button","onClick","type","gap","ItemLinkList","filter","item","status","map","ItemLink","key","id","length","Item","page","ItemEditor","style","fontFamily","border","fontSize","background","margin","padding","textDecoration","color","textAlign","params","itemId","title","resize","width","minHeight","value","onChange","e","target","window","confirm","actions","ADD_ITEM","state","Math","random","toString","substring","SET_ITEM_TITLE","REMOVE_ITEM","MARK_AS","GOTO","reducer","action","hasOwnProperty","Error","props","borderRadius","display","App","initialValue","rawValue","localStorage","getItem","storedState","JSON","parse","useState","setState","useEffect","setItem","stringify","useLocalStorage","setStoredState","useReducer","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c80a9dd.chunk.js","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react'\nimport './App.css'\nimport { TODO, DONE } from './status'\n\nfunction App() {\n  const [storedState, setStoredState] = useLocalStorage({})\n\n  const [state, dispatch] = useReducer(reducer, storedState)\n\n  useEffect(() => {\n    setStoredState(state)\n  }, [setStoredState, state])\n\n  const {\n    items = [],\n    page = {\n      id: 'INDEX',\n      params: {},\n    },\n  } = state\n\n  return (\n    <div className=\"App\">\n      {page.id === 'INDEX' && <Index items={items} dispatch={dispatch} />}\n      {page.id === 'ITEM' && <Item item={items.filter((item) => item.id === page.params.itemId)[0]} dispatch={dispatch} />}\n    </div>\n  )\n}\n\nfunction Index({ items, dispatch }) {\n  return (\n    <Stack>\n      <div>\n        <Button onClick={() => dispatch({ type: 'ADD_ITEM' })}>new</Button>\n      </div>\n      <Stack gap={1}>\n        <h3>TODO</h3>\n        <ItemLinkList items={items.filter((item) => item.status !== DONE)} dispatch={dispatch} />\n      </Stack>\n      <Stack gap={1}>\n        <h3>DONE</h3>\n        <ItemLinkList items={items.filter((item) => item.status === DONE)} dispatch={dispatch} />\n      </Stack>\n    </Stack>\n  )\n}\n\nfunction ItemLinkList({ items, dispatch }) {\n  return (\n    <Stack gap={1}>\n      {items.map((item) => (<ItemLink key={item.id} item={item} dispatch={dispatch} />))}\n      {items.length === 0 && <div>None</div>}\n    </Stack>\n  )\n}\n\nfunction Item({ item, dispatch }) {\n  return (\n    <Stack>\n      <div> \n        <Button onClick={() => dispatch({ type: 'GOTO', page: 'INDEX' })}>back</Button>\n      </div>\n      {item && <ItemEditor item={item} dispatch={dispatch} />}\n    </Stack>\n  )\n}\n\nfunction ItemLink({ item, dispatch }) {\n  return (\n    <div>\n      <div>\n        <button\n          style={{\n            fontFamily: 'serif',\n            border: '0',\n            fontSize: '1em',\n            background: 'transparent',\n            margin: '0',\n            padding: '0',\n            textDecoration: 'underline',\n            color: 'blue',\n            textAlign: 'left',\n          }}\n          onClick={() => dispatch({ type: 'GOTO', page: 'ITEM', params: { itemId: item.id } })}\n        >\n          {item.title}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nfunction ItemEditor({ item, dispatch }) {\n  return (\n    <Stack>\n      {item.status !== DONE && <div><Button onClick={() => dispatch({ type: 'MARK_AS', itemId: item.id, status: DONE })}>mark as done</Button></div>}\n      {item.status === DONE && <div><Button onClick={() => dispatch({ type: 'MARK_AS', itemId: item.id, status: TODO })}>mark as todo</Button></div>}\n      <div>\n        <textarea\n          style={{\n            resize: 'vertical',\n            width: '100%',\n            minHeight: '20em',\n          }}\n          value={item.title}\n          onChange={(e) => dispatch({ type: 'SET_ITEM_TITLE', itemId: item.id, value: e.target.value })}\n        />\n      </div>\n      <div><Button onClick={() => window.confirm('Are you sure?') && dispatch({ type: 'REMOVE_ITEM', itemId: item.id })}>delete...</Button></div>\n    </Stack>\n  )\n}\n\nfunction useLocalStorage(initialValue) {\n  const rawValue = localStorage.getItem('state')\n  const storedState = rawValue !== null ? JSON.parse(rawValue) : initialValue\n  const [state, setState] = useState(storedState)\n\n  useEffect(() => {\n    localStorage.setItem('state', JSON.stringify(state));\n  }, [state])\n\n  return [state, setState];\n}\n\nconst actions = {\n  ADD_ITEM: (state) => ({\n    ...state,\n    items: [...(state.items || []), { id: generateRandomId(), title: 'untitled' }],\n  }),\n  SET_ITEM_TITLE: (state, { itemId, value }) => ({\n    ...state,\n    items: state.items.map((item) => item.id === itemId ? { ...item, title: value } : item),\n  }),\n  REMOVE_ITEM: (state, { itemId }) => ({\n    ...state,\n    items: state.items.filter((item) => item.id !== itemId),\n  }),\n  MARK_AS: (state, { itemId, status }) => ({\n    ...state,\n    items: state.items.map((item) => item.id === itemId ? { ...item, status } : item),\n  }),\n  GOTO: (state, { page, params }) => ({\n    ...state,\n    page: { id: page, params },\n  }),\n}\n\nfunction reducer(state, action) {\n  if (actions.hasOwnProperty(action.type)) {\n    return actions[action.type](state, action)\n  }\n\n  throw new Error(`Unknown action type \\`${action.type}\\``)\n}\n\nfunction generateRandomId() {\n  return Math.random().toString(36).substring(7)\n}\n\nfunction Button({ ...props }) {\n  return (\n    <button\n      style={{\n        padding: '0.5em 1em',\n        background: 'white',\n        border: '1px solid grey',\n        borderRadius: '0.25em',\n        margin: 0,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction Stack({ gap = 2, ...props }) {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gap: `${gap / 2}em`,\n      }}\n      {...props}\n    />\n  )\n}\n\nexport default App\n","export const DONE = 'DONE'\nexport const TODO = 'TODO'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}